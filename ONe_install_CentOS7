# This is a script for ONe FedCloud installation.
# It is supposed to run in CentOS envirnment.
#
# Copyright 2015 CESNET - INDIGO-DataCloud
#
#!/bin/bash

set -x

echo "General setup start"

# several commands bellow need resolvation
if [ ! "`grep 127.0.0.1 /etc/hosts|grep $HOSTNAME`" ]; 
then 
	echo "127.0.0.1 $HOSTNAME `hostname -s`" >>/etc/hosts; 
fi

echo "General setup finished"


echo "ONe installation start"

# Install Server
#

# Dissable SELinux
sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/sysconfig/selinux
setenforce 0

# Add repo
yum install -y epel-release
cat << EOT > /etc/yum.repos.d/opennebula.repo
[opennebula]
name=opennebula
baseurl=http://downloads.opennebula.org/repo/4.14/CentOS/7/x86_64/
enabled=1
gpgcheck=0
EOT

# Install packages
yum install -y opennebula-server opennebula-sunstone
yum -y install gcc mysql-devel ruby-devel rubygems libcurl-devel gcc-c++ sqlite-devel
echo "1

" | /usr/share/one/install_gems

# Configure Sunstone & ONe
sed -i 's/:host: 127.0.0.1/:host: 0.0.0.0/' /etc/one/sunstone-server.conf
sed -i 's/"kvm" ]/"qemu" ]/' /etc/one/oned.conf

# Enable/run ONe & Sunstone
# XXX: open just required ports, i.e. 9869 for sunstone
systemctl stop firewalld
systemctl mask firewalld

systemctl enable opennebula
systemctl start opennebula
systemctl enable opennebula-sunstone
systemctl start opennebula-sunstone

# change oneadmin's password
su  oneadmin -c "oneuser passwd oneadmin 'opennebula'"
echo "oneadmin:opennebula" > /var/lib/one/.one/one_auth

# Configure SSH Public Key
su  oneadmin -c 'cat << EOT > ~/.ssh/config
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
EOT

chmod 600 ~/.ssh/config'


# Install ONe node
#

yum install -y opennebula-node-kvm
systemctl enable libvirtd.service
systemctl start libvirtd.service

# Create ON infrastructure

# Disk
oneimage create -d default --name ttylinux --path http://marketplace.c12g.com/appliance/4fc76a938fb81d3517000003/download/0
oneimage chmod ttylinux 666
echo -n "Waiting for image to be ready"
while [ "`oneimage list| grep lock`" ]; do echo -n .; sleep 1; done

# Network
NET=`ip addr  show virbr0| grep inet| awk '{print $2}'| sed 's/\.[^\.]*$//'`
printf "NAME = example\nTYPE = RANGED\nBRIDGE = virbr0\nNETWORK_SIZE = C\nNETWORK_ADDRESS = $NET.0\nGATEWAY = $NET.1\nDNS = $NET.1\nLOAD_BALANCER = $NET.3\n" > /var/tmp/example.net
onevnet create /var/tmp/example.net
onevnet addar example --ip $NET.100 --size 100

# Template
onetemplate create --name "ttylinux" --memory 128 --cpu 1 --disk oneadmin[ttylinux] --nic oneadmin[example] --vnc --vnc-password meta --vnc-listen 0.0.0.0
onetemplate chmod ttylinux 666

# Host
su - oneadmin -c "cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys"
su - oneadmin -c "ssh-keyscan -t ecdsa,rsa,dsa $HOSTNAME >> ~/.ssh/known_hosts"
onehost create $HOSTNAME -i kvm -v kvm -n dummy

# Create rocci test accounts
#
su - oneadmin -c "oneuser create rocci 'roccirocciroccirocciroccirocci' --driver server_cipher"
su - oneadmin -c "oneuser chgrp rocci oneadmin"
su - oneadmin -c "oneuser create roccitest 'roccitestroccitestroccitest'"

echo "ONe installation finished"
#####################################################################


#####################################################################
echo "rOCCI installation starts"

# get passenger RPMs
curl --fail -sSLo /etc/yum.repos.d/passenger.repo https://oss-binaries.phusionpassenger.com/yum/definitions/el-passenger.repo
#yum install -y mod_passenger
yum install -y yum-plugin-priorities


#cd /etc/yum.repos.d
#wget http://repository.egi.eu/community/software/rocci.server/1.1.x/releases/repofiles/sl-6-x86_64.repo
# XXX: get sl7 version of RPM
cd /tmp
wget http://home.zcu.cz/~mulac/indigo/occi-server-1.1.7+20160201214854-1.el7.x86_64.rpm
yum install -y occi-server-1.1.7+20160201214854-1.el7.x86_64.rpm

if ( ! grep "Listen\s*11443" /etc/httpd/conf/httpd.conf); then \
echo Listen 11443 >> /etc/httpd/conf/httpd.conf; fi
mv /etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/ssl.conf_not_used


# generate self-signed server certificate
unalias -a
cd /etc/ssl/certs/
mv localhost.crt localhost.crt.orig
sed -i "s/localhost.localdomain/$HOSTNAME/" make-dummy-cert
./make-dummy-cert localhost.crt
./renew-dummy-cert localhost.crt
split -b `grep "^$" -b localhost.crt |sed 's/://'` localhost.crt CERT
mkdir -p /etc/grid-security/certificates
cp  /etc/ssl/certs/CERTab /etc/grid-security/hostcert.pem
cp  /etc/ssl/certs/CERTaa /etc/grid-security/hostkey.pem
cp  /etc/ssl/certs/CERTab /etc/grid-security/certificates/hostcert.pem

# On OCCI client:
# put rOCCI server cert to /usr/local/share/ca-certificates/hostcert.crt 
# clear old certs&hashes if necessary
# run update-ca-certificates -f
# copy certificate and hash symlinks from /etc/ssl/certs to /etc/grid-security/certificates


# rOCCI configuration
sed -i 's/\(ROCCI_SERVER_BACKEND[ ]*\).*/\1opennebula/' /etc/httpd/conf.d/occi-ssl.conf
sed -i 's/\(ROCCI_SERVER_ONE_USER[ ]*\).*/\1rocci/' /etc/httpd/conf.d/occi-ssl.conf
sed -i 's/\(ROCCI_SERVER_ONE_PASSWD[ ]*\).*/\1roccirocciroccirocciroccirocci/' /etc/httpd/conf.d/occi-ssl.conf
sed -i "s/\(ROCCI_SERVER_HOSTNAME[ ]*\).*/\1$HOSTNAME/" /etc/httpd/conf.d/occi-ssl.conf

sed -i 's/Allow from all/&\n\tRequire all granted/' /etc/httpd/conf.d/occi-ssl.conf

# install and configure gridsite
yum install -y gridsite

sed -i 's/#  GridSiteEnvs on/GridSiteEnvs on/' /etc/httpd/conf.d/occi-ssl.conf
sed -i 's/#  GridSiteIndexes off/GridSiteIndexes off/' /etc/httpd/conf.d/occi-ssl.conf
sed -i 's/#  GridSiteGSIProxyLimit 4/GridSiteGSIProxyLimit 4/' /etc/httpd/conf.d/occi-ssl.conf
sed -i 's/#  GridSiteMethods ""/GridSiteMethods ""/' /etc/httpd/conf.d/occi-ssl.conf
sed -i 's/\([ ]*SSLVerifyClient\).*/\1 require/' /etc/httpd/conf.d/occi-ssl.conf
sed -i 's/\([ ]*SSLOptions\).*/\1 +StdEnvVars +ExportCertData/' /etc/httpd/conf.d/occi-ssl.conf

mkdir -p /etc/grid-security/vomsdir/fedcloud.egi.eu

cat > /etc/grid-security/vomsdir/fedcloud.egi.eu/voms1.egee.cesnet.cz.lsc << EOF
/DC=org/DC=terena/DC=tcs/C=CZ/ST=Hlavni mesto Praha/L=Praha 6/O=CESNET/CN=voms1.grid.cesnet.cz
/C=NL/ST=Noord-Holland/L=Amsterdam/O=TERENA/CN=TERENA eScience SSL CA 3
EOF

cat > /etc/grid-security/vomsdir/fedcloud.egi.eu/voms2.grid.cesnet.cz.lsc << EOF
/DC=org/DC=terena/DC=tcs/C=CZ/ST=Hlavni mesto Praha/L=Praha 6/O=CESNET/CN=voms2.grid.cesnet.cz
/C=NL/ST=Noord-Holland/L=Amsterdam/O=TERENA/CN=TERENA eScience SSL CA 3
EOF

# install EGI CA certificates
cat << EOT > /etc/yum.repos.d/egi_ca.repo
[EGI-trustanchors]
name=EGI-trustanchors
baseurl=http://repository.egi.eu/sw/production/cas/1/current/
gpgkey=http://repository.egi.eu/sw/production/cas/1/GPG-KEY-EUGridPMA-RPM-3
gpgcheck=1
enabled=1
EOT
yum install -y ca-policy-egi-core

systemctl enable httpd.service
systemctl start httpd.service
systemctl restart  memcached.service

echo "rOCCI installation finished"
#####################################################################

#####################################################################
echo "Perun installation starts"

# Be sure you are member of some VO which will feed Perun with some data. 
# For more info, see https://wiki.egi.eu/wiki/HOWTO11#Credentials

echo 'from="perun.ics.muni.cz",command="/opt/perun/bin/perun" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC26+QiDtZ3bnLiLllySgsImSPUX0/sFBmo//3PmqOsuJIBdWB5BLU5Ws+pTRxefqC8SHfI92ZQoGXe7aJniTXxbRPa0FZJ3fskAHwpbiJfstGVZ1hddBcHIvial3v5Rd++zRiKslDVTkXLlb+b1pTnjyTVbD/6kGILgnUz7RKY5DnXADVnmTdPliQCabhE41AhkWdcuWpHBNwvxONKoZJJpbuouDbcviX4lJu9TF9Ij62rZjcoNzg5/JiIKTcMVi8L04FTjyCMxKRzlo00IjSuapFnXQNNZUL5u/mfPA/HpyIkSAOiPXLhWy9UuBNo7xdrCmfTh1qUvzbuWXJZN3d9 perunv3@perun.ics.muni.cz' >>~oneadmin/.ssh/authorized_keys

yum install -y perl-XML-XPath

cd /tmp
git clone https://github.com/EGI-FCTF/fctf-perun
mkdir -p /opt/perun/bin
cd /opt/perun/bin
cp -r /tmp/fctf-perun/* /opt/perun/bin

onegroup create -n fedcloud.egi.eu
#onegroup create -n vo.indigo-datacloud.eu

echo "Perun installation finished"
#####################################################################


#####################################################################
echo "Oneacct-export installation starts"

cd /etc/yum.repos.d
wget -O oneacct-export.repo http://repository.egi.eu/community/software/oneacct.export/0.2.x/releases/repofiles/sl-6-x86_64.repo

yum install -y oneacct-export

sed -i "s/site_name: Undefined/site_name: Cesnet\'s Indigo FedCloud applience/" /etc/oneacct-export/conf.yml
systemctl enable redis
systemctl start redis
systemctl enable oneacct-export-cron
systemctl start oneacct-export-cron
sed -i 's/^Defaults[ ]*requiretty/#Defaults    requiretty/' /etc/sudoers
systemctl enable oneacct-export-sidekiq
systemctl start oneacct-export-sidekiq

# TODO: waiting for CentOS 7 version of APEL
# GGUS #119768
#yum -y install apel-client

wget http://home.zcu.cz/~mulac/indigo/apel-ssm-2.1.7-1.el7.centos.noarch.rpm
wget http://home.zcu.cz/~mulac/indigo/apel-lib-1.5.1-1.el7.centos.noarch.rpm
wget http://home.zcu.cz/~mulac/indigo/apel-client-1.5.1-1.el7.centos.noarch.rpm
#wget http://home.zcu.cz/~mulac/indigo/apel-parsers-1.5.1-1.el7.centos.noarch.rpm
#wget http://home.zcu.cz/~mulac/indigo/apel-server-1.5.1-1.el7.centos.noarch.rpm
yum install -y apel-client-1.5.1-1.el7.centos.noarch.rpm apel-ssm-2.1.7-1.el7.centos.noarch.rpm apel-lib-1.5.1-1.el7.centos.noarch.rpm

touch /etc/oneacct-export/compat.one
echo oneadmin >/etc/oneacct-export/groups.exclude


echo "Oneacct-export installation finished"
#####################################################################


#####################################################################
echo "BDII + cloud info provider installation starts"

yum install -y bdii

# TODO: waiting for CentOS 7 version of cloud-info-provider-service
# GGUS #119768
#yum install -y cloud-info-provider-service

wget http://home.zcu.cz/~mulac/indigo/cloud-info-provider-0.5-1.el7.centos.noarch.rpm
yum install -y cloud-info-provider-0.5-1.el7.centos.noarch.rpm

cp /etc/cloud-info-provider/sample.opennebularocci.yaml /etc/cloud-info-provider/bdii.yaml
sed -i "s/#name: SITE_NAME/name: Cesnet\'s Indigo FedCloud applience/" /etc/cloud-info-provider/bdii.yaml
sed -i "s/api_type: ON-XML-RPC/api_type: OCCI/" /etc/cloud-info-provider/bdii.yaml

cat >/var/lib/bdii/gip/provider/cloud-info-provider <<EOF
#!/bin/sh

cloud-info-provider-service	--yaml /etc/cloud-info-provider/bdii.yaml \\
				--middleware opennebularocci \\
				--on-auth roccitest:roccitestroccitestroccitest \\
				--on-rpcxml-endpoint http://$HOSTNAME:2633/RPC2
EOF
chmod +x /var/lib/bdii/gip/provider/cloud-info-provider

systemctl enable bdii
systemctl start bdii



echo "BDII + cloud info provider installation finished"
#####################################################################


#####################################################################
# Install ONEDock

# install Docker

# in default, do not install onedock in Fedcloud applience
exit 0

curl -fsSL https://get.docker.com/ | sh
systemctl enable docker
systemctl start docker

yum install -y docker-registry
systemctl enable docker-registry.service
service docker-registry start

#reusing certificate generated for rOCCI
mkdir -p /etc/docker/certs.d/$HOSTNAME:5000/
cp /etc/ssl/certs/localhost.crt /etc/docker/certs.d/$HOSTNAME\:5000/
cp /etc/ssl/certs/localhost.crt /etc/pki/ca-trust/source/anchors/
update-ca-trust extract
service docker restart

yum -y install jq xmlstarlet

cd /tmp/
git clone https://github.com/indigo-dc/onedock
cd onedock
yes| ./setup_files.sh

sed -i 's/data/images/' /var/lib/one/remotes/onedock.conf

cat >> /etc/one/oned.conf << EOF
IM_MAD = [
      name       = "onedock",
      executable = "one_im_ssh",
      arguments  = "-r 3 -t 15 onedock" ]

VM_MAD = [
    name       = "onedock",
    executable = "one_vmm_exec",
    arguments  = "-t 15 -r 0 onedock",
    type       = "xml" ]

TM_MAD_CONF = [
    name = "onedock", ln_target = "SYSTEM", clone_target = "SYSTEM", shared = "yes"
]
EOF

sed -i 's/arguments = "-t 15 -d dummy,lvm,shared,fs_lvm,qcow2,ssh,vmfs,ceph,dev"/arguments = "-t 15 -d dummy,lvm,shared,fs_lvm,qcow2,ssh,vmfs,ceph,dev,onedock"/' /etc/one/oned.conf
sed -i 's/arguments  = "-t 15 -d dummy,fs,vmfs,lvm,ceph,dev"/arguments  = "-t 15 -d dummy,fs,vmfs,lvm,ceph,dev,onedock"/' /etc/one/oned.conf


# XXX: use /var/lib/one/remote/docker-manage-network (wiki says /var/tmp/one/docker-manage-network)
# XXX: add /usr/sbin/losetup 
sed -i 's!oneadmin ALL=(ALL) NOPASSWD: ONE_MISC, ONE_NET, ONE_LVM, ONE_ISCSI, ONE_OVS, ONE_XEN!Cmnd_Alias ONEDOCK = /var/lib/one/remotes/docker-manage-network, /usr/bin/qemu-nbd, /usr/bin/svncterm, /usr/sbin/losetup\n\noneadmin ALL=(ALL) NOPASSWD: ONE_MISC, ONE_NET, ONE_LVM, ONE_ISCSI, ONE_OVS, ONE_XEN, ONEDOCK!'  /etc/sudoers.d/opennebula 
usermod -aG docker oneadmin

sed -i 's!^SCRIPTS_REMOTE_DIR=.*!SCRIPTS_REMOTE_DIR=/var/lib/one/remotes!'  /etc/one/oned.conf

# Start DHCPD for docker containers
#cat > /etc/dnsmasq.d/doker.conf << EOF
#strict-order
#pid-file=/var/run/libvirt/network/docker.pid
#except-interface=lo
#bind-dynamic
#interface=docker0
#dhcp-range=172.17.10.1,172.17.10.100
#dhcp-no-override
#dhcp-lease-max=253
#dhcp-hostsfile=/var/lib/libvirt/dnsmasq/docker.hostsfile
#addn-hosts=/var/lib/libvirt/dnsmasq/docker.addnhosts
#EOF

#systemctl enable dnsmasq
#systemctl start dnsmasq

systemctl restart opennebula


# Create ONe infrastructure for onedock
#
cd /var/tmp

# Create datastore
cat > onedock.ds << EOF
NAME=onedock
DS_MAD=onedock
TM_MAD=onedock
EOF
onedatastore create onedock.ds

# Create image
# - https://hub.docker.com/r/rastasheep/ubuntu-sshd/
# - access root/root
cat > ubuntu-docker.tmpl << EOF
NAME="ubuntu"
PATH=docker://rastasheep/ubuntu-sshd
TYPE=OS
DESCRIPTION="Ubuntu Trusty with SSHd"
EOF
oneimage create -d onedock ubuntu-docker.tmpl
while [ "`oneimage list| grep onedock| grep lock`" ]; do echo -n .; sleep 1; done
# check status, in case of err try use '127.0.0.1 HOSTNAME' instead of 'IP HOSTNAME' in /etc/hosts

# Create network
cat > docker-private.net << EOF
NAME=private
BRIDGE=docker0
NETWORK_ADDRESS = "172.17.0.1"
NETWORK_MASK    = "255.255.0.0"
DNS             = "172.17.0.1"
GATEWAY         = "172.17.0.1"
AR=[TYPE = "IP4", IP = "172.17.10.1", SIZE = "100" ]
EOF
onevnet create docker-private.net

# Create host
echo "127.0.0.1 onedock-test" >> /etc/hosts
onehost create onedock-test -i onedock -v onedock -n dummy

# Create template
onetemplate create --name "onedock-ubuntu-sshd" --memory 128 --cpu 1 --disk oneadmin[ubuntu] --nic oneadmin[private] --vnc --vnc-password onedock --vnc-listen 0.0.0.0 --net_context
onetemplate chmod onedock-ubuntu-sshd 666

# XXX: opravit /etc/sysconfig/network-scripts/ifcfg-eth0
# PEERDNS="no"
